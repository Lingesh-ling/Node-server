To check the version of Node
1. Node -v

Window = Global in node
Document = Process in node

W


what is Node?
Node is a Javascript runtime that uses the V-8 engine.

What is V8 engine?
V8 engine is an open source javascript engine written in c++ that takes javascript code and compiles it to machine code.

First Application
1. Create hello world
2. node run the hello.js file. (node hello.js)

NODE Apis
npm js

Second Application.
1. Node Apis
2. File and os Apis 
   syntax 
	const f = require('fs')
	const o = require('os')
	var user = o.userInfo()
	f.appendFileSync('name.txt',`Hello ${user.username}`)
	
-----------------------------------------------------------------
REQUIRE using another file require('./sum.js')>>>

module.exports.age = 1;

module.exports.addNote = (a,b) => {
	return a + b;
 }
	
 
IN ANOTHER File>>>>>
const notes = require('./sum.js');

console.log(notes.age);
var res = notes.addNote(3,5);
--------------------------------------------------------

NPM -v to check version

npm init >>> to install package.json

INSTALL lodash PACKAGE
npm install lodash --save

const _ = require('lodash')

console.log(_.isString('APB'));
RESULT true;

var uniquevale = _.uniq(['Lingesh',3,3,4,5,4]);
RESULT Lingesh,3,4,5
---------------------------------------------------------

nodemon module >>> to run terminal automatically

npm install nodemon -g

torun nodemon app.js

----------------------------------------------------------------
process.argv to get arguments from terminal

------------------------------------------------------------------------
yargs module

npm install yargs@4.7.1 --save

const yargs = require('yargs');

var yarg = yargs.argv;

if(command === 'add') {
var res = notess.addNote(yarg.title,yarg.body);

console.log(res);
}

var addNote = (ti,bo) => {
  return 'hello' + ti + bo;
}

module.exports = {
  addNote
}
-----------------------------------------------------------------------------
to change JSON to String>>>>>>
var obj = { 
Name: 'Lingesh'
};

var stringobj = JSON.stringify(obj);

-----------------------------------------------------------------------------

to change string to JSON

JSON.parse(string);

-------------------------------------------------------------------------------
to save string value using JSON Object>>>


var obj = {
  Name:'Lingesh'
};

const fs = require('fs');

var objstr = JSON.stringify(obj);
fs.writeFileSync('newfile.json',objstr);

var notesString = fs.readFileSync('newfile.json');

var note = JSON.parse(notesString);
console.log(typeof note);
console.log(note);
---------------------------------------------------------------------------------
Debugging _____------
node inspect debuging.js
list(10)
n >>>>> for next line
c >>>>> for continue
repl >>> to check values in run time
debugger; >>> to break statement


-------------------------------------------------------------------------------
GEOLocation using REQUEST NPM

Install using npm install request@2.83.0  --save

first to get url type like this :>>>>>>>>>> https://maps.googleapis.com/maps/api/geocode/json?address=102%20srirangammal%20street%20chennai%20600021

1. const request = require('request');

2. request({},() => {});

3. request({
  url:'https://maps.googleapis.com/maps/api/geocode/json?address=102%20srirangammal%20street%20chennai%20600021',
  json:true
},(error,response,body) => {
  console.log(body)
});


TO VIEW ALL DETAILS IN THE REQUEST. CONVERT BODY INTO 

>>>>>JSON.STRINGIFY(BODY, UNDEFINED, 5)
--------------------------------------------------------------------------------------
CODE STATUS
400: everything works great,
404: file not found,
500: server crashes,
ENOTFOUND: worng URL

var x = body.results[0].formatted_address
  console.log(`Address: ${x}`);
  console.log(`Location Lat: ${body.results[0].geometry.location.lat}`)
  console.log(`Location Long: ${body.results[0].geometry.location.lng}`)
---------------------------------------------------------------------------------------------------------------
WEATHER APP

const yargs = require('yargs');
const argvv = yargs
.options({
  ma:{
    demand:true,
    alias:'myAddress',
    describe:'please enter',
    string:true
  }
})
.help('help','h')
.argv;

to convert whitespace to encoded string
var encodedAddress =encodeURIComponent(argvv.ma)

request({
  url:`https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,
  json:true
},(error,response,body) => {
  if(error) {
    console.log('unable to connect server')
  }else if(body.status === 'ZERO_RESULTS') {
    console.log('invalid address')
  }else if (body.status === 'OK'){
    var x = body.results[0].formatted_address
    console.log(`Address: ${x}`);
    console.log(`Location Lat: ${body.results[0].geometry.location.lat}`)
    console.log(`Location Long: ${body.results[0].geometry.location.lng}`)
  }

-----------------------------------------------------------------------------------------------------------------
In Separate File

const request = require('request')

var addresss = (address,callback) => {
  var encodedAddress =encodeURIComponent(address)

  request({
    url:`https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,
    json:true
  },(error,response,body) => {
    if(error) {
      callback('unable to connect server')

    }else if(body.status === 'ZERO_RESULTS') {
      callback('invalid Address')
    }else if (body.status === 'OK'){
      callback(undefined,{
        addres:body.results[0].formatted_address,
        lat:body.results[0].geometry.location.lat,
        long:body.results[0].geometry.location.lng
      });
    
    }

  });
}

module.exports = {
  addresss
}


IN MAIN FILE

const yargs = require('yargs');
const weather = require('./weatherfolder/weatherapp');
const argvv = yargs
.options({
  ma:{
    demand:true,
    alias:'myAddress',
    describe:'please enter',
    string:true
  }
})
.help('help','h')
.argv;


weather.addresss(argvv.ma, (errorMessage, results) => {
  if(errorMessage) {
    console.log(errorMessage);
  }
  else {
    console.log(JSON.stringify(results,undefined,3))
  }
})

------------------------------------------------------------------------------------
>>>>forecast.io

developer.forecast.io

Signup and copy security key fecd2538f3c6c45be2b5fc081eadc2bd

goto documentaion


and copy url >>>> https://api.darksky.net/forecast/[key]/[latitude],[longitude]


const request = require('request')


request({
  url:'https://api.darksky.net/forecast/fecd2538f3c6c45be2b5fc081eadc2bd/13.0826802,80.2707184',
  json:true
},(error,response,body) => {
if(error){
  console.log('unable to connect')
}else if(response.statusCode === 400){
  console.log('invalid Adddress')
}else if(!error && response.statusCode === 200){
  console.log(body.currently.icon)
}
});

-------------------------------------------------------------------------------------------------------
PROMISE

var add = new Promise((resolve,reject) => {
  reject('reject')
});

add.then((msg) => {
  console.log(msg)
}, (msg) => {
  console.log(msg)
});

---------------------
chaining Promise

var add = (a,b) => {
  return new Promise((resolve,reject) => {
    if(typeof a === 'number' && typeof b === 'number'){
      resolve(a+b);
    }
    else {
      reject('enter numbers')
    }

  });
}

add(8,'9').then((res) => {
console.log(res);
return add(res,8)
}
).then((res) => {
  console.log(res);
}).catch((error) => {
  console.log(error);
})

---------------------------------------------------------------------------------
>>>>>axios API

npm install axios@version --save


const axios = require('axios');
const yargs = require('yargs')

const argv = yargs
.options({
  ma:{
    demand:true,
    alias:'myAddress',
    describe:'enter address',
    string:true
  }
})
.help('help','h')
.argv;

var address = argv.ma;
var addressUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}`



axios.get(addressUrl).then((response) => {
  if(response.data.status === 'ZERO_RESULTS')
  {
    throw new Error('unable to find address');
  }
  var lat = response.data.results[0].geometry.location.lat;
  var lng = response.data.results[0].geometry.location.lng;
  var forecastt = `https://api.darksky.net/forecast/fecd2538f3c6c45be2b5fc081eadc2bd/${lat},${lng}`

  return axios.get(forecastt).then((response) => {
    console.log(response.data.currently.icon);
  })
}).catch((error) => {
  console.log(error.message)
});


---------------------------------------------------------------------------------------------------------------------
EXPRESS JS

npm install express@version --save

const express = require(express);

var app = express();

app.get('/',(req,res) => {
res.send('<p>Lingesh</p>');
});

app.listen(3000);

--------------------------------------------------------------------------------------------------------------
Static WEB server

const express = require(express);

var app = express();

app.use(express.static(__dirname + '/public'););

app.listen(3000, () => {
  console.log('sucess');
});
-----------------------------------------------------------------------------------------------------------
handlebars.js (hbs)

npm install hbs@version --save

const hbs = require('hbs');

var app = express();

app.set('view engine', 'hbs');

Create folder called VIEWS >>> create file called about.hbs

app.get('/about',(req,res) => {
	res.render('about.hbs');
});

----------------------------------------------------------------------------------
To pass data from server to html page

app.get('/about',(req,res) => {
	res.render('about.hbs',{pageTitle:'ABOUTUS'});
});

--------------------------------------------------------------------------------
REGISTER PARTIALS TO SET DEFAULT HEADER AND FOOTER

hbs.registerPartials(__dirname + '/partials');

>>>>inside body

<body>
	{{> footer}}
</body>

-------------------------------------------------------------------------------
REGISTERHELPER TO WRITE JAVASCRIPT FUNCTION
hbs.registerHelper('fullcaps', (text) => {
  return text.toUpperCase();
});

IN BODY FILE
<BODY>
<h1>{{fullcaps pageTitle}}</h1>
</BODY>
----------------------------------------------------------------

Middleware Express

app.use((req,res,next) => {

  next();
});

app.use((req,res,next) => {
  res.render('maintennace.hbs')
})

-----------------------------------------------------------------------------------
GIT

Downlaod git and install it

>>>git --version to find version

>>>git init

>>git status

>> git add filename

>>git add . (to add all files)

>>git commit -m "intian commit"

----------------------------------------------------------------
Checking for existing SSH keys

>>ls -al ~/.ssh

Open Git Bash.

>>ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

--------Adding your SSH key to the ssh-agent
# start the ssh-agent in the background
>>>eval $(ssh-agent -s)

>>>ssh-add ~/.ssh/id_rsa


----------Adding a new SSH key to your GitHub account
#Copy the SSH key to your clipboard.
>>> clip < ~/.ssh/id_rsa.pub

----------------------------------------------
Testing your SSH connection
>>ssh -T git@github.com
------------------------------------

create repository
push an existing repository

copy and paste two lines in project command

------------------------------------------------------------------
>>heroku
Create Account
download windows CLI heroku

>>test with heroku --help

LOGIN
heroku login

TO ADD SSH KEYS
heroku keys:add

TO TESTING CONNECTION
ssh -t git@heroku.com


CHANGE PORT NUMBER
const port = process.env.PORT || 3000;

UPDATED MODIFIED FILE TO GITHUB
git add .

FINALLY PUSH INTO GITUP
git push

CREATE YOUR APP IN HEROKU
heroko create

push into heroko
git push heroku
